@inproceedings{10.1145/3441296.3441393,
author = {Godiksen, Christian and Herrmann, Thomas and H\"{u}ttel, Hans and Lauridsen, Mikkel Korup and Owliaie, Iman},
title = {A Type-Safe Structure Editor Calculus},
year = {2021},
isbn = {9781450383059},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
howpublished = {\url{https://doi.org/10.1145/3441296.3441393}},
doi = {10.1145/3441296.3441393},
abstract = {Structure editors make syntax errors impossible, but they still allow construction of programs with incomplete semantics, leading to program states that cannot be evaluated. We introduce a structure editor calculus for a simple functional programming language that allows for incomplete programs. Our editor expressions may interleave construction and evaluation of programs and can thus describe the history of the development of a program. We extend our editor calculus with types and define a resource-aware type system that prohibits editor expressions introducing type errors in the abstract syntax tree and prove that the type system is sound.},
booktitle = {Proceedings of the 2021 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
pages = {1–13},
numpages = {13},
keywords = {type systems, functional programming, structure editors},
location = {Virtual, Denmark},
series = {PEPM 2021}
}

@online{Elm-lang-core,
author ={Evan Czaplicki},
year = {2020},
month ={feb},
title ={Elm Package Docs Core Libraries 1.0.5},
howpublished = {\url{https://package.elm-lang.org/packages/elm/core/1.0.5/}},
note = "[accessed April 26, 2022]"
}

@online{Elm-lang-svg,
author ={Evan Czaplicki},
year = {2018},
month ={sep},
title ={Elm Package Docs SVG in Elm 1.0.1},
howpublished = {\url{https://package.elm-lang.org/packages/elm/svg/1.0.1/}},
note = "[accessed April 27, 2022]"
}

@online{Elm-lang-material,
author ={Evan Czaplicki},
year = {2021},
month ={oct},
title ={Elm Package Docs Material Components for Elm 8.0.1},
howpublished = {\url{https://package.elm-lang.org/packages/aforemny/material-components-web-elm/8.0.1/}},
note = "[accessed May 7, 2022]"
}

@online{Elm-lang-html,
author ={Evan Czaplicki},
year = {2018},
month ={aug},
title ={Elm Package Docs HTML 1.0.0},
howpublished = {\url{https://package.elm-lang.org/packages/elm/html/1.0.0/}},
note = "[accessed May 7, 2022]"
}

@online{Elm-lang-architecture,
author = {Evan Czaplicki},
title = {The Elm Architecture},
howpublished = {\url{https://guide.elm-lang.org/architecture/}},
note = "[accessed June 8, 2022]"
}

@online{Elm-lang-custom-types,
author = {Evan Czaplicki},
title = {Elm Custom Types},
howpublished = {\url{https://elm-lang.org/docs/syntax#custom-types}},
note = "[accessed June 8, 2022]"
}

@article{10.1145/358746.358755,
author = {Teitelbaum, Tim and Reps, Thomas},
title = {The Cornell Program Synthesizer: A Syntax-Directed Programming Environment},
year = {1981},
issue_date = {Sept. 1981},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/358746.358755},
doi = {10.1145/358746.358755},
abstract = {Programs are not text; they are hierarchical compositions of computational structures and should be edited, executed, and debugged in an environment that consistently acknowledges and reinforces this viewpoint. The Cornell Program Synthesizer demands a structural perspective at all stages of program development. Its separate features are unified by a common foundation: a grammar for the programming language. Its full-screen derivation-tree editor and syntax-directed diagnostic interpreter combine to make the Synthesizer a powerful and responsive interactive programming tool.},
journal = {Commun. ACM},
month = {sep},
pages = {563–573},
numpages = {11},
keywords = {syntax-directed editor, program development system, diagnostic interpreter, source language debugger, programming environment, template}
}

@inproceedings{conf/popl/Hazelnut17,
 author    = {Cyrus Omar and
               Ian Voysey and
               Michael Hilton and
               Jonathan Aldrich and
               Matthew A. Hammer},
  editor    = {Giuseppe Castagna and
               Andrew D. Gordon},
  title     = {Hazelnut: a bidirectionally typed structure editor calculus},
  booktitle = {Proceedings of the 44th {ACM} {SIGPLAN} Symposium on Principles of
               Programming Languages, {POPL} 2017, Paris, France, January 18-20,
               2017},
  pages     = {86--99},
  publisher = {{ACM}},
  year      = {2017},
  url       = {https://doi.org/10.1145/3009837.3009900},
  doi       = {10.1145/3009837.3009900},
  timestamp = {Mon, 14 Feb 2022 09:20:26 +0100},
  biburl    = {https://dblp.org/rec/conf/popl/OmarVHAH17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{10.1145/1592761.1592779,
author = {Resnick, Mitchel and Maloney, John and Monroy-Hern\'{a}ndez, Andr\'{e}s and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
title = {Scratch: Programming for All},
year = {2009},
issue_date = {November 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/1592761.1592779},
doi = {10.1145/1592761.1592779},
abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing, chatting, and interacting.},
journal = {Commun. ACM},
month = {nov},
pages = {60–67},
numpages = {8}
}

@inproceedings{10.1145/332040.332481,
author = {Conway, Matthew and Audia, Steve and Burnette, Tommy and Cosgrove, Dennis and Christiansen, Kevin},
title = {Alice: Lessons Learned from Building a 3D System for Novices},
year = {2000},
isbn = {1581132166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/332040.332481},
doi = {10.1145/332040.332481},
abstract = {We present lessons learned from developing Alice, a 3D graphics programming environment designed for undergraduates with no 3D graphics or programming experience. Alice is a Windows 95/NT tool for describing the time-based and interactive behavior of 3D objects, not a CAD tool for creating object geometry. Our observations and conclusions come from formal and informal observations of hundreds of users. Primary results include the use of LOGO-style egocentric coordinate systems, the use of arbitrary objects as lightweight coordinate systems, the launching of implicit threads of execution, extensive function overloading for a small set of commands, the careful choice of command names, and the ubiquitous use of animation and undo.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {486–493},
numpages = {8},
keywords = {interactive 3D graphics, animation authoring tools},
location = {The Hague, The Netherlands},
series = {CHI '00}
}

@online{Elm-lang-material-design,
author ={Evan Czaplicki},
year   = {2021},
month  = {oct},
title  = {Material Components for Elm 8.0.1},
howpublished = {\url{https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/}},
note = "[accessed June 12, 2022]"
}

@online{webgl,
year = {2022},
month ={jun},
title ={WebGL: 2D and 3D graphics for the web},
howpublished = {\url{https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API}},
note = "[accessed June 12, 2022]"
}

@online{svg,
year = {2022},
month ={apr},
title ={SVG: Scalable Vector Graphics},
howpublished = {\url{https://developer.mozilla.org/en-US/docs/Web/SVG}},
note = "[accessed June 12, 2022]"
}

@online{Material-design,
title  = {Material Design},
howpublished = {\url{https://material.io/design/introduction}},
note = "[accessed June 12, 2022]"
}

@InProceedings{ifl2022,
  author = 	 {Hans Hüttel and Christoffer Lind Andersen and Nana Gjerulf Sandberg and Anja Elisasen Lumholtz Nielsen and Peter Mikkelsen},
  title = 	 {A Structure Editor with Type-Safe Copy/Paste},
  booktitle =	 {Proceedings of the 34th Symposium on Implementation and Application of Functional Languages (IFL 2022)},
  year =	 {2022},
  pages =	 {104-116},
  month =	 {September 2022}
}

@inproceedings{DBLP:conf/synasc/KjaerLMH21,
  author    = {Rasmus Rendal Kj{\ae}r and
               Magnus Holm Lundbergh and
               Magnus Mantzius and
               Hans H{\"{u}}ttel},
  editor    = {Carsten Schneider and
               Mircea Marin and
               Viorel Negru and
               Daniela Zaharie},
  title     = {An Editor Calculus With Undo/Redo},
  booktitle = {23rd International Symposium on Symbolic and Numeric Algorithms for
               Scientific Computing, {SYNASC} 2021, Timisoara, Romania, December
               7-10, 2021},
  pages     = {66--74},
  publisher = {{IEEE}},
  year      = {2021},
  url       = {https://doi.org/10.1109/SYNASC54541.2021.00023},
  doi       = {10.1109/SYNASC54541.2021.00023},
  timestamp = {Wed, 23 Feb 2022 18:55:50 +0100},
  biburl    = {https://dblp.org/rec/conf/synasc/KjaerLMH21.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}